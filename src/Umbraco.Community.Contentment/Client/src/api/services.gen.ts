// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './types.gen';

export class ContentmentService {
    /**
     * @param data The data for the request.
     * @param data.type
     * @returns unknown OK
     * @throws ApiError
     */
    public static getContentmentConfigurationEditorModels(data: $OpenApiTs['/umbraco/management/api/v1/contentment/configuration-editor/models']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/configuration-editor/models']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/contentment/configuration-editor/models',
            query: {
                type: data.type
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postContentmentDataListEditor(data: $OpenApiTs['/umbraco/management/api/v1/contentment/data-list/editor']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/data-list/editor']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/contentment/data-list/editor',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postContentmentDataPickerEditor(data: $OpenApiTs['/umbraco/management/api/v1/contentment/data-picker/editor']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/data-picker/editor']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/contentment/data-picker/editor',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.dataTypeKey
     * @param data.pageNumber
     * @param data.pageSize
     * @param data.query
     * @returns unknown OK
     * @throws ApiError
     */
    public static getContentmentDataPickerSearch(data: $OpenApiTs['/umbraco/management/api/v1/contentment/data-picker/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/data-picker/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/contentment/data-picker/search',
            query: {
                id: data.id,
                dataTypeKey: data.dataTypeKey,
                pageNumber: data.pageNumber,
                pageSize: data.pageSize,
                query: data.query
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getContentmentDataAssemblies(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/data/assemblies']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/contentment/data/assemblies',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.assembly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getContentmentDataEnums(data: $OpenApiTs['/umbraco/management/api/v1/contentment/data/enums']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/data/enums']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/contentment/data/enums',
            query: {
                assembly: data.assembly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class CultureService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getCulture(data: $OpenApiTs['/umbraco/management/api/v1/culture']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/culture']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/culture',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class DataTypeService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDataType(data: $OpenApiTs['/umbraco/management/api/v1/data-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/data-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDataTypeById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/data-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDataTypeById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/data-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDataTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/copy']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/data-type/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns boolean OK
     * @throws ApiError
     */
    public static getDataTypeByIdIsUsed(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/is-used']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/is-used']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/{id}/is-used',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDataTypeByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/data-type/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeByIdReferences(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/references']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/{id}/references',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDataTypeFolder(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/data-type/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDataTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDataTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.name
     * @param data.editorUiAlias
     * @param data.editorAlias
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterDataType(data: $OpenApiTs['/umbraco/management/api/v1/filter/data-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/data-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/data-type',
            query: {
                skip: data.skip,
                take: data.take,
                name: data.name,
                editorUiAlias: data.editorUiAlias,
                editorAlias: data.editorAlias
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDataType(data: $OpenApiTs['/umbraco/management/api/v1/item/data-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/data-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/data-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDataTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/data-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/data-type/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/data-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDataTypeAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/data-type/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/data-type/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/data-type/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDataTypeChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/data-type/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/data-type/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/data-type/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDataTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/data-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/data-type/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/data-type/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DictionaryService {
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDictionary(data: $OpenApiTs['/umbraco/management/api/v1/dictionary']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dictionary',
            query: {
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDictionary(data: $OpenApiTs['/umbraco/management/api/v1/dictionary']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/dictionary',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDictionaryById(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dictionary/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDictionaryById(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/dictionary/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDictionaryById(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/dictionary/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.includeChildren
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDictionaryByIdExport(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/export']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/export']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dictionary/{id}/export',
            path: {
                id: data.id
            },
            query: {
                includeChildren: data.includeChildren
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDictionaryByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/dictionary/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDictionaryImport(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/import']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/dictionary/import',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDictionary(data: $OpenApiTs['/umbraco/management/api/v1/item/dictionary']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/dictionary']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/dictionary',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDictionaryAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/dictionary/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/dictionary/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDictionaryChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/dictionary/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/dictionary/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/dictionary/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDictionaryRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/dictionary/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/dictionary/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/dictionary/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentBlueprintService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentBlueprint(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-blueprint',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentBlueprintById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentBlueprintById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentBlueprintById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentBlueprintByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentBlueprintFolder(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-blueprint/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentBlueprintFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentBlueprintFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentBlueprintFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentBlueprintFromDocument(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/from-document']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/from-document']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-blueprint/from-document',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentBlueprint(data: $OpenApiTs['/umbraco/management/api/v1/item/document-blueprint']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document-blueprint']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document-blueprint',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentBlueprintAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentBlueprintChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-blueprint/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentBlueprintRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-blueprint/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentTypeService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentType(data: $OpenApiTs['/umbraco/management/api/v1/document-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentTypeById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdAllowedChildren(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/allowed-children']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/allowed-children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdBlueprint(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/blueprint']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/blueprint']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdCompositionReferences(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/composition-references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/composition-references']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/copy']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdExport(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/export']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/export']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/export',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeByIdImport(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/import']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/import']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/{id}/import',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeAllowedAtRoot(data: $OpenApiTs['/umbraco/management/api/v1/document-type/allowed-at-root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/allowed-at-root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/allowed-at-root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postDocumentTypeAvailableCompositions(data: $OpenApiTs['/umbraco/management/api/v1/document-type/available-compositions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/available-compositions']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/available-compositions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentTypeFolder(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentTypeImport(data: $OpenApiTs['/umbraco/management/api/v1/document-type/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/import']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/import',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentType(data: $OpenApiTs['/umbraco/management/api/v1/item/document-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/document-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document-type/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentTypeAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-type/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-type/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-type/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentTypeChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-type/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-type/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-type/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-type/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-type/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentVersionService {
    /**
     * @param data The data for the request.
     * @param data.documentId
     * @param data.culture
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentVersion(data: $OpenApiTs['/umbraco/management/api/v1/document-version']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-version',
            query: {
                documentId: data.documentId,
                culture: data.culture,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentVersionById(data: $OpenApiTs['/umbraco/management/api/v1/document-version/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-version/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.preventCleanup
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentVersionByIdPreventCleanup(data: $OpenApiTs['/umbraco/management/api/v1/document-version/{id}/prevent-cleanup']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version/{id}/prevent-cleanup']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',
            path: {
                id: data.id
            },
            query: {
                preventCleanup: data.preventCleanup
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.culture
     * @returns string OK
     * @throws ApiError
     */
    public static postDocumentVersionByIdRollback(data: $OpenApiTs['/umbraco/management/api/v1/document-version/{id}/rollback']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version/{id}/rollback']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-version/{id}/rollback',
            path: {
                id: data.id
            },
            query: {
                culture: data.culture
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class DocumentService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.dataTypeId
     * @param data.orderBy
     * @param data.orderCulture
     * @param data.orderDirection
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getCollectionDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/collection/document/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/collection/document/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/collection/document/{id}',
            path: {
                id: data.id
            },
            query: {
                dataTypeId: data.dataTypeId,
                orderBy: data.orderBy,
                orderCulture: data.orderCulture,
                orderDirection: data.orderDirection,
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocument(data: $OpenApiTs['/umbraco/management/api/v1/document']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.orderDirection
     * @param data.sinceDate
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdAuditLog(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/audit-log']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/audit-log']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/audit-log',
            path: {
                id: data.id
            },
            query: {
                orderDirection: data.orderDirection,
                sinceDate: data.sinceDate,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/copy']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdDomains(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/domains',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdDomains(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/domains',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdMoveToRecycleBin(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/move-to-recycle-bin']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/move-to-recycle-bin']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdNotifications(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdNotifications(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdPublish(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/publish']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/publish']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/publish',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdPublishWithDescendants(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/publish-with-descendants']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/publish-with-descendants']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdReferencedBy(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-by']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-by']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/referenced-by',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdReferencedDescendants(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-descendants']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-descendants']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdUnpublish(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/unpublish']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/unpublish']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/unpublish',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdValidate(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/validate']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/validate']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentAreReferenced(data: $OpenApiTs['/umbraco/management/api/v1/document/are-referenced']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/are-referenced']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/are-referenced',
            query: {
                id: data.id,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentSort(data: $OpenApiTs['/umbraco/management/api/v1/document/sort']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/sort']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/sort',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentUrls(data: $OpenApiTs['/umbraco/management/api/v1/document/urls']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/urls']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/urls',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postDocumentValidate(data: $OpenApiTs['/umbraco/management/api/v1/document/validate']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/validate']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document/validate',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocument(data: $OpenApiTs['/umbraco/management/api/v1/item/document']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/document/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinDocument(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/document',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinDocumentByIdOriginalParent(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putRecycleBinDocumentByIdRestore(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/restore']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/restore']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinDocumentChildren(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/document/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinDocumentRoot(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/document/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/document/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/document/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/document/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document/root',
            query: {
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DynamicRootService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postDynamicRootQuery(data: $OpenApiTs['/umbraco/management/api/v1/dynamic-root/query']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dynamic-root/query']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/dynamic-root/query',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static getDynamicRootSteps(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dynamic-root/steps']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dynamic-root/steps',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class HealthCheckService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getHealthCheckGroup(data: $OpenApiTs['/umbraco/management/api/v1/health-check-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check-group']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/health-check-group',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public static getHealthCheckGroupByName(data: $OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/health-check-group/{name}',
            path: {
                name: data.name
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public static postHealthCheckGroupByNameCheck(data: $OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}/check']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}/check']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/health-check-group/{name}/check',
            path: {
                name: data.name
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postHealthCheckExecuteAction(data: $OpenApiTs['/umbraco/management/api/v1/health-check/execute-action']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check/execute-action']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/health-check/execute-action',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class HelpService {
    /**
     * @param data The data for the request.
     * @param data.section
     * @param data.tree
     * @param data.skip
     * @param data.take
     * @param data.baseUrl
     * @returns unknown OK
     * @throws ApiError
     */
    public static getHelp(data: $OpenApiTs['/umbraco/management/api/v1/help']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/help']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/help',
            query: {
                section: data.section,
                tree: data.tree,
                skip: data.skip,
                take: data.take,
                baseUrl: data.baseUrl
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class ImagingService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.height
     * @param data.width
     * @param data.mode
     * @returns unknown OK
     * @throws ApiError
     */
    public static getImagingResizeUrls(data: $OpenApiTs['/umbraco/management/api/v1/imaging/resize/urls']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/imaging/resize/urls']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/imaging/resize/urls',
            query: {
                id: data.id,
                height: data.height,
                width: data.width,
                mode: data.mode
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ImportService {
    /**
     * @param data The data for the request.
     * @param data.temporaryFileId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getImportAnalyze(data: $OpenApiTs['/umbraco/management/api/v1/import/analyze']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/import/analyze']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/import/analyze',
            query: {
                temporaryFileId: data.temporaryFileId
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
}

export class IndexerService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getIndexer(data: $OpenApiTs['/umbraco/management/api/v1/indexer']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/indexer']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/indexer',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.indexName
     * @returns unknown OK
     * @throws ApiError
     */
    public static getIndexerByIndexName(data: $OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/indexer/{indexName}',
            path: {
                indexName: data.indexName
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.indexName
     * @returns string OK
     * @throws ApiError
     */
    public static postIndexerByIndexNameRebuild(data: $OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}/rebuild']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}/rebuild']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',
            path: {
                indexName: data.indexName
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
}

export class InstallService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getInstallSettings(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/install/settings']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/install/settings',
            errors: {
                428: 'Precondition Required'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postInstallSetup(data: $OpenApiTs['/umbraco/management/api/v1/install/setup']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/install/setup']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/install/setup',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                428: 'Precondition Required'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postInstallValidateDatabase(data: $OpenApiTs['/umbraco/management/api/v1/install/validate-database']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/install/validate-database']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/install/validate-database',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request'
            }
        });
    }
    
}

export class LanguageService {
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemLanguage(data: $OpenApiTs['/umbraco/management/api/v1/item/language']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/language']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/language',
            query: {
                isoCode: data.isoCode
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemLanguageDefault(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/language/default']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/language/default',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLanguage(data: $OpenApiTs['/umbraco/management/api/v1/language']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/language',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postLanguage(data: $OpenApiTs['/umbraco/management/api/v1/language']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/language',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLanguageByIsoCode(data: $OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/language/{isoCode}',
            path: {
                isoCode: data.isoCode
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @returns string OK
     * @throws ApiError
     */
    public static deleteLanguageByIsoCode(data: $OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/language/{isoCode}',
            path: {
                isoCode: data.isoCode
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putLanguageByIsoCode(data: $OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/language/{isoCode}',
            path: {
                isoCode: data.isoCode
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class LogViewerService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerLevel(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/level']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/level']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/level',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerLevelCount(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/level-count']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/level-count']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/level-count',
            query: {
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.orderDirection
     * @param data.filterExpression
     * @param data.logLevel
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerLog(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/log']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/log']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/log',
            query: {
                skip: data.skip,
                take: data.take,
                orderDirection: data.orderDirection,
                filterExpression: data.filterExpression,
                logLevel: data.logLevel,
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerMessageTemplate(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/message-template']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/message-template']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/message-template',
            query: {
                skip: data.skip,
                take: data.take,
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerSavedSearch(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postLogViewerSavedSearch(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerSavedSearchByName(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            path: {
                name: data.name
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns string OK
     * @throws ApiError
     */
    public static deleteLogViewerSavedSearchByName(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            path: {
                name: data.name
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerValidateLogsSize(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/validate-logs-size']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/validate-logs-size']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',
            query: {
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ManifestService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getManifestManifest(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/manifest/manifest']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/manifest/manifest',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getManifestManifestPrivate(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/manifest/manifest/private']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/manifest/manifest/private',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getManifestManifestPublic(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/manifest/manifest/public']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/manifest/manifest/public'
        });
    }
    
}

export class MediaTypeService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaType(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileExtension
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaTypeAllowed(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type/allowed']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type/allowed']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type/allowed',
            query: {
                fileExtension: data.fileExtension,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaTypeFolders(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type/folders']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type/folders']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type/folders',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaType(data: $OpenApiTs['/umbraco/management/api/v1/media-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMediaTypeById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/media-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeByIdAllowedChildren(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/allowed-children']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/allowed-children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeByIdCompositionReferences(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/composition-references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/composition-references']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/copy']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeByIdExport(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/export']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/export']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}/export',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeByIdImport(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/import']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/import']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/{id}/import',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeAllowedAtRoot(data: $OpenApiTs['/umbraco/management/api/v1/media-type/allowed-at-root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/allowed-at-root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/allowed-at-root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postMediaTypeAvailableCompositions(data: $OpenApiTs['/umbraco/management/api/v1/media-type/available-compositions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/available-compositions']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/available-compositions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaTypeFolder(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMediaTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaTypeImport(data: $OpenApiTs['/umbraco/management/api/v1/media-type/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/import']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/import',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaTypeAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/media-type/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media-type/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media-type/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaTypeChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/media-type/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media-type/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media-type/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/media-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media-type/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media-type/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MediaService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.dataTypeId
     * @param data.orderBy
     * @param data.orderDirection
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getCollectionMedia(data: $OpenApiTs['/umbraco/management/api/v1/collection/media']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/collection/media']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/collection/media',
            query: {
                id: data.id,
                dataTypeId: data.dataTypeId,
                orderBy: data.orderBy,
                orderDirection: data.orderDirection,
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMedia(data: $OpenApiTs['/umbraco/management/api/v1/item/media']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/media/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMedia(data: $OpenApiTs['/umbraco/management/api/v1/media']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaById(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMediaById(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/media/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaById(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.orderDirection
     * @param data.sinceDate
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaByIdAuditLog(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/audit-log']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/audit-log']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}/audit-log',
            path: {
                id: data.id
            },
            query: {
                orderDirection: data.orderDirection,
                sinceDate: data.sinceDate,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/move']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaByIdMoveToRecycleBin(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/move-to-recycle-bin']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/move-to-recycle-bin']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaByIdReferencedBy(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-by']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-by']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}/referenced-by',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaByIdReferencedDescendants(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-descendants']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-descendants']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaByIdValidate(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/validate']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/validate']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaAreReferenced(data: $OpenApiTs['/umbraco/management/api/v1/media/are-referenced']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/are-referenced']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/are-referenced',
            query: {
                id: data.id,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaSort(data: $OpenApiTs['/umbraco/management/api/v1/media/sort']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/sort']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/sort',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaUrls(data: $OpenApiTs['/umbraco/management/api/v1/media/urls']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/urls']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/urls',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postMediaValidate(data: $OpenApiTs['/umbraco/management/api/v1/media/validate']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/validate']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media/validate',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinMedia(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/media',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinMediaById(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinMediaByIdOriginalParent(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putRecycleBinMediaByIdRestore(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/restore']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/restore']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinMediaChildren(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/media/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinMediaRoot(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/media/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/media/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/media/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/media/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media/root',
            query: {
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MemberGroupService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberGroup(data: $OpenApiTs['/umbraco/management/api/v1/item/member-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member-group']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member-group',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberGroup(data: $OpenApiTs['/umbraco/management/api/v1/member-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-group',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMemberGroup(data: $OpenApiTs['/umbraco/management/api/v1/member-group']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-group',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberGroupById(data: $OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-group/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMemberGroupById(data: $OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/member-group/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberGroupById(data: $OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member-group/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMemberGroupRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/member-group/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/member-group/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/member-group/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MemberTypeService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberType(data: $OpenApiTs['/umbraco/management/api/v1/item/member-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/member-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member-type/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMemberType(data: $OpenApiTs['/umbraco/management/api/v1/member-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberTypeById(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMemberTypeById(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/member-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberTypeById(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberTypeByIdCompositionReferences(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}/composition-references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}/composition-references']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string Created
     * @throws ApiError
     */
    public static postMemberTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}/copy']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-type/{id}/copy',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postMemberTypeAvailableCompositions(data: $OpenApiTs['/umbraco/management/api/v1/member-type/available-compositions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/available-compositions']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-type/available-compositions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMemberTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/member-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/member-type/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/member-type/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MemberService {
    /**
     * @param data The data for the request.
     * @param data.memberTypeId
     * @param data.memberGroupName
     * @param data.isApproved
     * @param data.isLockedOut
     * @param data.orderBy
     * @param data.orderDirection
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterMember(data: $OpenApiTs['/umbraco/management/api/v1/filter/member']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/member']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/member',
            query: {
                memberTypeId: data.memberTypeId,
                memberGroupName: data.memberGroupName,
                isApproved: data.isApproved,
                isLockedOut: data.isLockedOut,
                orderBy: data.orderBy,
                orderDirection: data.orderDirection,
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMember(data: $OpenApiTs['/umbraco/management/api/v1/item/member']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/member/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMember(data: $OpenApiTs['/umbraco/management/api/v1/member']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberById(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMemberById(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/member/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberById(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberByIdValidate(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}/validate']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}/validate']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postMemberValidate(data: $OpenApiTs['/umbraco/management/api/v1/member/validate']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/validate']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member/validate',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class ModelsBuilderService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postModelsBuilderBuild(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/models-builder/build']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/models-builder/build',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                428: 'Precondition Required'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getModelsBuilderDashboard(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/models-builder/dashboard']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/models-builder/dashboard',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getModelsBuilderStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/models-builder/status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/models-builder/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ObjectTypesService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getObjectTypes(data: $OpenApiTs['/umbraco/management/api/v1/object-types']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/object-types']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/object-types',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class OEmbedService {
    /**
     * @param data The data for the request.
     * @param data.url
     * @param data.maxWidth
     * @param data.maxHeight
     * @returns unknown OK
     * @throws ApiError
     */
    public static getOembedQuery(data: $OpenApiTs['/umbraco/management/api/v1/oembed/query']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/oembed/query']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/oembed/query',
            query: {
                url: data.url,
                maxWidth: data.maxWidth,
                maxHeight: data.maxHeight
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PackageService {
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns string OK
     * @throws ApiError
     */
    public static postPackageByNameRunMigration(data: $OpenApiTs['/umbraco/management/api/v1/package/{name}/run-migration']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/{name}/run-migration']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/package/{name}/run-migration',
            path: {
                name: data.name
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageCreated(data: $OpenApiTs['/umbraco/management/api/v1/package/created']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/created',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postPackageCreated(data: $OpenApiTs['/umbraco/management/api/v1/package/created']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/package/created',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageCreatedById(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/created/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deletePackageCreatedById(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/package/created/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putPackageCreatedById(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/package/created/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageCreatedByIdDownload(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}/download']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}/download']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/created/{id}/download',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageMigrationStatus(data: $OpenApiTs['/umbraco/management/api/v1/package/migration-status']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/migration-status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/migration-status',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PartialViewService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemPartialView(data: $OpenApiTs['/umbraco/management/api/v1/item/partial-view']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/partial-view']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/partial-view',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postPartialView(data: $OpenApiTs['/umbraco/management/api/v1/partial-view']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/partial-view',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deletePartialViewByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/partial-view/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putPartialViewByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/partial-view/{path}',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static putPartialViewByPathRename(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}/rename']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}/rename']['put']['res'][201]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/partial-view/{path}/rename',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postPartialViewFolder(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/partial-view/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deletePartialViewFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewSnippet(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/snippet']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/snippet']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/snippet',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewSnippetById(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/snippet/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/snippet/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreePartialViewAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/partial-view/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/partial-view/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreePartialViewChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/partial-view/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/partial-view/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/partial-view/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreePartialViewRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/partial-view/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/partial-view/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/partial-view/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PreviewService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static deletePreview(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/preview']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/preview',
            responseHeader: 'Umb-Notifications'
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPreview(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/preview']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/preview',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class ProfilingService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getProfilingStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/profiling/status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/profiling/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putProfilingStatus(data: $OpenApiTs['/umbraco/management/api/v1/profiling/status']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/profiling/status']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/profiling/status',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PropertyTypeService {
    /**
     * @param data The data for the request.
     * @param data.contentTypeId
     * @param data.propertyAlias
     * @returns boolean OK
     * @throws ApiError
     */
    public static getPropertyTypeIsUsed(data: $OpenApiTs['/umbraco/management/api/v1/property-type/is-used']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/property-type/is-used']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/property-type/is-used',
            query: {
                contentTypeId: data.contentTypeId,
                propertyAlias: data.propertyAlias
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PublishedCacheService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPublishedCacheCollect(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/collect']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/published-cache/collect',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPublishedCacheRebuild(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/rebuild']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/published-cache/rebuild',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPublishedCacheReload(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/reload']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/published-cache/reload',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static getPublishedCacheStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/published-cache/status',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class RedirectManagementService {
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRedirectManagement(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/redirect-management',
            query: {
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRedirectManagementById(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRedirectManagementById(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRedirectManagementStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/redirect-management/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.status
     * @returns string OK
     * @throws ApiError
     */
    public static postRedirectManagementStatus(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management/status']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/status']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/redirect-management/status',
            query: {
                status: data.status
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class RelationTypeService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemRelationType(data: $OpenApiTs['/umbraco/management/api/v1/item/relation-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/relation-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/relation-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRelationType(data: $OpenApiTs['/umbraco/management/api/v1/relation-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/relation-type']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/relation-type',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRelationTypeById(data: $OpenApiTs['/umbraco/management/api/v1/relation-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/relation-type/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/relation-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class RelationService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRelationTypeById(data: $OpenApiTs['/umbraco/management/api/v1/relation/type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/relation/type/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/relation/type/{id}',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class ScriptService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemScript(data: $OpenApiTs['/umbraco/management/api/v1/item/script']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/script']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/script',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postScript(data: $OpenApiTs['/umbraco/management/api/v1/script']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/script',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getScriptByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/script/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteScriptByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/script/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putScriptByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/script/{path}',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static putScriptByPathRename(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}/rename']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}/rename']['put']['res'][201]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/script/{path}/rename',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postScriptFolder(data: $OpenApiTs['/umbraco/management/api/v1/script/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/script/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getScriptFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/script/folder/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteScriptFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/script/folder/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeScriptAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/script/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/script/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/script/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeScriptChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/script/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/script/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/script/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeScriptRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/script/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/script/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/script/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class SearcherService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSearcher(data: $OpenApiTs['/umbraco/management/api/v1/searcher']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/searcher']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/searcher',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searcherName
     * @param data.term
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSearcherBySearcherNameQuery(data: $OpenApiTs['/umbraco/management/api/v1/searcher/{searcherName}/query']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/searcher/{searcherName}/query']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',
            path: {
                searcherName: data.searcherName
            },
            query: {
                term: data.term,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
}

export class SecurityService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSecurityConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/security/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postSecurityForgotPassword(data: $OpenApiTs['/umbraco/management/api/v1/security/forgot-password']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/forgot-password']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/security/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string No Content
     * @throws ApiError
     */
    public static postSecurityForgotPasswordReset(data: $OpenApiTs['/umbraco/management/api/v1/security/forgot-password/reset']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/forgot-password/reset']['post']['res'][204]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/security/forgot-password/reset',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postSecurityForgotPasswordVerify(data: $OpenApiTs['/umbraco/management/api/v1/security/forgot-password/verify']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/forgot-password/verify']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/security/forgot-password/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                404: 'Not Found'
            }
        });
    }
    
}

export class SegmentService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSegment(data: $OpenApiTs['/umbraco/management/api/v1/segment']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/segment']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/segment',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ServerService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerInformation(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/information']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/information',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/status',
            errors: {
                400: 'Bad Request'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerTroubleshooting(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/troubleshooting']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/troubleshooting',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class StaticFileService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemStaticFile(data: $OpenApiTs['/umbraco/management/api/v1/item/static-file']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/static-file']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/static-file',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStaticFileAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/static-file/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/static-file/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/static-file/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStaticFileChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/static-file/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/static-file/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/static-file/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStaticFileRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/static-file/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/static-file/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/static-file/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class StylesheetService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemStylesheet(data: $OpenApiTs['/umbraco/management/api/v1/item/stylesheet']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/stylesheet']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/stylesheet',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postStylesheet(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/stylesheet',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getStylesheetByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteStylesheetByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putStylesheetByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static putStylesheetByPathRename(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}/rename']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}/rename']['put']['res'][201]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postStylesheetFolder(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/folder']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/stylesheet/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getStylesheetFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteStylesheetFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStylesheetAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStylesheetChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/stylesheet/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStylesheetRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/stylesheet/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class TagService {
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.tagGroup
     * @param data.culture
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTag(data: $OpenApiTs['/umbraco/management/api/v1/tag']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tag']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tag',
            query: {
                query: data.query,
                tagGroup: data.tagGroup,
                culture: data.culture,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class TelemetryService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTelemetry(data: $OpenApiTs['/umbraco/management/api/v1/telemetry']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/telemetry']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/telemetry',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTelemetryLevel(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/telemetry/level']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/telemetry/level',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postTelemetryLevel(data: $OpenApiTs['/umbraco/management/api/v1/telemetry/level']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/telemetry/level']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/telemetry/level',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class TemplateService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemTemplate(data: $OpenApiTs['/umbraco/management/api/v1/item/template']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/template']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/template',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemTemplateSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/template/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/template/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/template/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postTemplate(data: $OpenApiTs['/umbraco/management/api/v1/template']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/template',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemplateById(data: $OpenApiTs['/umbraco/management/api/v1/template/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/template/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteTemplateById(data: $OpenApiTs['/umbraco/management/api/v1/template/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/template/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putTemplateById(data: $OpenApiTs['/umbraco/management/api/v1/template/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/template/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemplateConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/template/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postTemplateQueryExecute(data: $OpenApiTs['/umbraco/management/api/v1/template/query/execute']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/query/execute']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/template/query/execute',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemplateQuerySettings(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/query/settings']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/template/query/settings',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeTemplateAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/template/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/template/ancestors']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/template/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeTemplateChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/template/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/template/children']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/template/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeTemplateRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/template/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/template/root']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/template/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class TemporaryFileService {
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns string Created
     * @throws ApiError
     */
    public static postTemporaryFile(data: $OpenApiTs['/umbraco/management/api/v1/temporary-file']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/temporary-file',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemporaryFileById(data: $OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteTemporaryFileById(data: $OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemporaryFileConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/temporary-file/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class UpgradeService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postUpgradeAuthorize(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/upgrade/authorize']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/upgrade/authorize',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                428: 'Precondition Required',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUpgradeSettings(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/upgrade/settings']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/upgrade/settings',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                428: 'Precondition Required'
            }
        });
    }
    
}

export class UserDataService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUserData(data: $OpenApiTs['/umbraco/management/api/v1/user-data']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user-data',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.groups
     * @param data.identifiers
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserData(data: $OpenApiTs['/umbraco/management/api/v1/user-data']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-data',
            query: {
                groups: data.groups,
                identifiers: data.identifiers,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUserData(data: $OpenApiTs['/umbraco/management/api/v1/user-data']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/user-data',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserDataById(data: $OpenApiTs['/umbraco/management/api/v1/user-data/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-data/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
}

export class UserGroupService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.filter
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/filter/user-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/user-group']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/user-group',
            query: {
                skip: data.skip,
                take: data.take,
                filter: data.filter
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/item/user-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/user-group']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/user-group',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/user-group']['delete']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user-group',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/user-group']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user-group',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/user-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-group',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserGroupById(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-group/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserGroupById(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user-group/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUserGroupById(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/user-group/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserGroupByIdUsers(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserGroupByIdUsers(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class UserService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.orderBy
     * @param data.orderDirection
     * @param data.userGroupIds
     * @param data.userStates
     * @param data.filter
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterUser(data: $OpenApiTs['/umbraco/management/api/v1/filter/user']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/user']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/user',
            query: {
                skip: data.skip,
                take: data.take,
                orderBy: data.orderBy,
                orderDirection: data.orderDirection,
                userGroupIds: data.userGroupIds,
                userStates: data.userStates,
                filter: data.filter
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemUser(data: $OpenApiTs['/umbraco/management/api/v1/item/user']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/user']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/user',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUser(data: $OpenApiTs['/umbraco/management/api/v1/user']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUser(data: $OpenApiTs['/umbraco/management/api/v1/user']['delete']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUser(data: $OpenApiTs['/umbraco/management/api/v1/user']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserById(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserById(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUserById(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/user/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserById2Fa(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/{id}/2fa',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.providerName
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserById2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa/{providerName}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa/{providerName}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',
            path: {
                id: data.id,
                providerName: data.providerName
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserByIdChangePassword(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/change-password']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/change-password']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/{id}/change-password',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static postUserByIdResetPassword(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/reset-password']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/reset-password']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/{id}/reset-password',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserAvatarById(data: $OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserAvatarById(data: $OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrent(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrent2Fa(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/2fa',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.code
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserCurrent2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            path: {
                providerName: data.providerName
            },
            query: {
                code: data.code
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postUserCurrent2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            path: {
                providerName: data.providerName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrent2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            path: {
                providerName: data.providerName
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserCurrentAvatar(data: $OpenApiTs['/umbraco/management/api/v1/user/current/avatar']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/avatar']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/current/avatar',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserCurrentChangePassword(data: $OpenApiTs['/umbraco/management/api/v1/user/current/change-password']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/change-password']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/current/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/configuration']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentLoginProviders(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/login-providers']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/login-providers',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentPermissions(data: $OpenApiTs['/umbraco/management/api/v1/user/current/permissions']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/permissions']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/permissions',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentPermissionsDocument(data: $OpenApiTs['/umbraco/management/api/v1/user/current/permissions/document']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/permissions/document']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/permissions/document',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentPermissionsMedia(data: $OpenApiTs['/umbraco/management/api/v1/user/current/permissions/media']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/permissions/media']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/permissions/media',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserDisable(data: $OpenApiTs['/umbraco/management/api/v1/user/disable']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/disable']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/disable',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserEnable(data: $OpenApiTs['/umbraco/management/api/v1/user/enable']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/enable']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/enable',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUserInvite(data: $OpenApiTs['/umbraco/management/api/v1/user/invite']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserInviteCreatePassword(data: $OpenApiTs['/umbraco/management/api/v1/user/invite/create-password']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite/create-password']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite/create-password',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserInviteResend(data: $OpenApiTs['/umbraco/management/api/v1/user/invite/resend']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite/resend']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite/resend',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postUserInviteVerify(data: $OpenApiTs['/umbraco/management/api/v1/user/invite/verify']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite/verify']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserSetUserGroups(data: $OpenApiTs['/umbraco/management/api/v1/user/set-user-groups']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/set-user-groups']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/set-user-groups',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserUnlock(data: $OpenApiTs['/umbraco/management/api/v1/user/unlock']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/unlock']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/unlock',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class WebhookService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemWebhook(data: $OpenApiTs['/umbraco/management/api/v1/item/webhook']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/webhook']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/webhook',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getWebhook(data: $OpenApiTs['/umbraco/management/api/v1/webhook']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/webhook',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postWebhook(data: $OpenApiTs['/umbraco/management/api/v1/webhook']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getWebhookById(data: $OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/webhook/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteWebhookById(data: $OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/webhook/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putWebhookById(data: $OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/webhook/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getWebhookEvents(data: $OpenApiTs['/umbraco/management/api/v1/webhook/events']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/events']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/webhook/events',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}