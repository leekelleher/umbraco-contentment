// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostDataListEditorData, PostDataListEditorResponse, PostDataListEditorError, PostDataPickerEditorData, PostDataPickerEditorResponse, PostDataPickerEditorError, GetDataPickerSearchData, GetDataPickerSearchResponse, GetDataPickerSearchError, GetAssembliesDataData, GetAssembliesDataResponse, GetAssembliesDataError, GetEnumsDataData, GetEnumsDataResponse, GetEnumsDataError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class DataListService {
    public static postDataListEditor<ThrowOnError extends boolean = true>(options?: Options<PostDataListEditorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDataListEditorResponse, PostDataListEditorError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/contentment/data-list/editor',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class DataPickerService {
    public static postDataPickerEditor<ThrowOnError extends boolean = true>(options?: Options<PostDataPickerEditorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDataPickerEditorResponse, PostDataPickerEditorError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/contentment/data-picker/editor',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDataPickerSearch<ThrowOnError extends boolean = true>(options?: Options<GetDataPickerSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDataPickerSearchResponse, GetDataPickerSearchError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/contentment/data-picker/search',
            ...options
        });
    }
    
}

export class DataService {
    public static getAssembliesData<ThrowOnError extends boolean = true>(options?: Options<GetAssembliesDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAssembliesDataResponse, GetAssembliesDataError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/contentment/data/assemblies',
            ...options
        });
    }
    
    public static getEnumsData<ThrowOnError extends boolean = true>(options?: Options<GetEnumsDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEnumsDataResponse, GetEnumsDataError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/contentment/data/enums',
            ...options
        });
    }
    
}